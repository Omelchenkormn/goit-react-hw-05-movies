{"version":3,"file":"static/js/809.ea88735c.chunk.js","mappings":"mUAEAA,IAAAA,SAAAA,QAAyB,+BACzB,IAAMC,EAAM,mCAECC,EAAkB,mCAAG,wGACTF,IAAAA,IAAA,sCAAyCC,IADhC,uBACxBE,EADwB,EACxBA,KACAC,EAAYD,EAAZC,QAFwB,kBAGzBA,GAHyB,2CAAH,qDAMlBC,EAAe,mCAAG,WAAMC,GAAN,yFACNN,IAAAA,IAAA,iBACXM,EADW,oBACQL,EADR,oBADM,uBACrBE,EADqB,EACrBA,KADqB,kBAKtBA,GALsB,2CAAH,sDAQfI,EAAS,mCAAG,WAAMD,GAAN,2FACAN,IAAAA,IAAA,iBACXM,EADW,4BACgBL,EADhB,oBADA,uBACfE,EADe,EACfA,KAGAK,EAASL,EAATK,KAJe,kBAKhBA,GALgB,2CAAH,sDAQTC,EAAY,mCAAG,WAAMH,GAAN,2FACHN,IAAAA,IAAA,iBACXM,EADW,4BACgBL,EADhB,2BADG,uBAClBE,EADkB,EAClBA,KAGAC,EAAYD,EAAZC,QAJkB,kBAKnBA,GALmB,2CAAH,sDAQZM,EAAsB,mCAAG,WAAMC,GAAN,2FACbX,IAAAA,IAAA,+BACGC,EADH,iCAC+BU,EAD/B,gCADa,uBAC5BR,EAD4B,EAC5BA,KAGAC,EAAYD,EAAZC,QAJ4B,kBAK7BA,GAL6B,2CAAH,uD,0ICLnC,EA1Ba,WACX,MCD0B,WAC1B,IAAQE,GAAYM,EAAAA,EAAAA,MAAZN,QACR,GAAoCO,EAAAA,EAAAA,UAAS,MAA7C,eAAOC,EAAP,KAAmBC,EAAnB,KAgBA,OAdAC,EAAAA,EAAAA,YAAU,YACRT,EAAAA,EAAAA,GAAUD,GACPW,MAAK,SAAAT,GACgB,IAAhBA,EAAKU,OAITH,EAAcP,GAHZW,QAAQC,IAAI,iBAKfC,OAAM,SAAAC,GACLH,QAAQC,IAAIE,QAEf,CAAChB,IAEG,CAAEQ,WAAAA,GDjBcS,GAAfT,EAAR,EAAQA,WACR,OACE,8BACGA,IACC,SAAC,EAAAU,UAAD,UACGV,EAAWW,KAAI,SAAAC,GAAK,OACnB,UAAC,EAAAC,KAAD,YACE,SAAC,EAAAC,IAAD,CACEC,IACEH,EAAMI,aAAN,0CACuCJ,EAAMI,cAD7C,UAEOC,GAETC,IAAI,sBACJC,MAAM,SAER,SAAC,EAAAC,KAAD,UAAOR,EAAMS,iBACb,UAAC,EAAAC,UAAD,yBAAuBV,EAAMW,eAXpBX,EAAMY,a,iNEThBd,EAAYe,EAAAA,EAAAA,GAAH,iGAKTZ,EAAOY,EAAAA,EAAAA,GAAH,oEAKJX,EAAMW,EAAAA,EAAAA,IAAH,oLAWHL,EAAOK,EAAAA,EAAAA,GAAH,sFAKJH,EAAYG,EAAAA,EAAAA,EAAH,uF","sources":["components/services/api.jsx","page/Cast/Cast.jsx","hoc/useFetchCast.jsx","page/Cast/Cast.styled.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = '4ab48dfc0ecb6ed8c49106d1e05906af';\n\nexport const fetchPopListMovies = async () => {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  const { results } = data;\n  return results;\n};\n\nexport const fetchOneMovieId = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchCast = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  const { cast } = data;\n  return cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  const { results } = data;\n  return results;\n};\n\nexport const fetchMoviesForKeyWorld = async valueSearch => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${KEY}&language=en-US&query=${valueSearch}&page=1&include_adult=false`\n  );\n  const { results } = data;\n  return results;\n};\n","import { Container, List, Img, Name, Character } from './Cast.styled';\nimport defImg from './profileNotFound.png';\nimport { useFetchCast } from 'hoc/useFetchCast';\n\nconst Cast = () => {\n  const { castActors } = useFetchCast();\n  return (\n    <>\n      {castActors && (\n        <Container>\n          {castActors.map(actor => (\n            <List key={actor.id}>\n              <Img\n                src={\n                  actor.profile_path\n                    ? `https://image.tmdb.org/t/p/w500/${actor.profile_path}`\n                    : `${defImg}`\n                }\n                alt=\"actor.original_name\"\n                width=\"250\"\n              />\n              <Name>{actor.original_name}</Name>\n              <Character>Character: {actor.character}</Character>\n            </List>\n          ))}\n        </Container>\n      )}\n    </>\n  );\n};\nexport default Cast;\n","import { useParams } from 'react-router-dom';\nimport { fetchCast } from 'components/services/api';\nimport { useState, useEffect } from 'react';\n\nexport const useFetchCast = () => {\n  const { movieId } = useParams();\n  const [castActors, setCastActors] = useState(null);\n\n  useEffect(() => {\n    fetchCast(movieId)\n      .then(cast => {\n        if (cast.length === 0) {\n          console.log('net dannih');\n          return;\n        }\n        setCastActors(cast);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, [movieId]);\n\n  return { castActors };\n};\n","import styled from '@emotion/styled';\n\nexport const Container = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n  justify-content: space-between;\n`;\nexport const List = styled.li`\n  flex-basis: 18%;\n  margin-bottom: 15px;\n`;\n\nexport const Img = styled.img`\n  width: 190px;\n  height: 270px;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n\n  &:hover,\n  :focus {\n    transform: scale(1.08);\n  }\n`;\n\nexport const Name = styled.h4`\n  margin-top: 10px;\n  font-size: 17px;\n  font-weight: 600;\n`;\nexport const Character = styled.p`\n  margin-top: 10px;\n  font-size: 17px;\n  font-weight: 300;\n`;\n"],"names":["axios","KEY","fetchPopListMovies","data","results","fetchOneMovieId","movieId","fetchCast","cast","fetchReviews","fetchMoviesForKeyWorld","valueSearch","useParams","useState","castActors","setCastActors","useEffect","then","length","console","log","catch","error","useFetchCast","Container","map","actor","List","Img","src","profile_path","defImg","alt","width","Name","original_name","Character","character","id","styled"],"sourceRoot":""}