{"version":3,"file":"static/js/262.c86915d1.chunk.js","mappings":"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","sources":["components/services/api.jsx","components/Form/FormSearchMovies.styled.jsx","components/Form/FormSearchMovies.jsx","page/MoviesPage/MoviesPage.jsx","hoc/useFetchListMovies.jsx","page/MoviesPage/MoviesPage.styled.jsx"],"sourcesContent":["import axios from 'axios';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\nconst KEY = '4ab48dfc0ecb6ed8c49106d1e05906af';\n\nexport const fetchPopListMovies = async () => {\n  const { data } = await axios.get(`/trending/movie/day?api_key=${KEY}`);\n  const { results } = data;\n  return results;\n};\n\nexport const fetchOneMovieId = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}?api_key=${KEY}&language=en-US`\n  );\n\n  return data;\n};\n\nexport const fetchCast = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/credits?api_key=${KEY}&language=en-US`\n  );\n  const { cast } = data;\n  return cast;\n};\n\nexport const fetchReviews = async movieId => {\n  const { data } = await axios.get(\n    `/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`\n  );\n  const { results } = data;\n  return results;\n};\n\nexport const fetchMoviesForKeyWorld = async valueSearch => {\n  const { data } = await axios.get(\n    `search/movie?api_key=${KEY}&language=en-US&query=${valueSearch}&page=1&include_adult=false`\n  );\n  const { results } = data;\n  return results;\n};\n","import styled from '@emotion/styled';\nimport { Field } from 'formik';\n\nexport const Container = styled.div`\n  display: flex;\n  justify-content: center;\n`;\n\nexport const EntryField = styled(Field)`\n  height: 31px;\n  width: 150px;\n  font-size: 15px;\n  outline: none;\n`;\n\nexport const Button = styled.button`\n  height: 30px;\n  width: 65px;\n  font-size: 15px;\n  margin-left: 5px;\n`;\n","import { Formik, Form } from 'formik';\nimport { Container, EntryField, Button } from './FormSearchMovies.styled';\n\nconst initialValues = {\n  query: '',\n};\n\nexport const FormSearchMovies = ({ searchHandler }) => {\n  const handleSubmit = (initialValues, { resetForm }) => {\n    const { query } = initialValues;\n    searchHandler(query);\n    resetForm();\n  };\n\n  return (\n    <Container>\n      <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n        <Form autoComplete=\"off\">\n          <EntryField type=\"text\" name=\"query\" placeholder=\"Search movies\" />\n          <Button type=\"submit\">Search</Button>\n        </Form>\n      </Formik>\n    </Container>\n  );\n};\n","import { FormSearchMovies } from 'components/Form/FormSearchMovies';\nimport { Wraper, List, IMG, UL, Title, Links } from './MoviesPage.styled';\nimport { useFetchListMovies } from 'hoc/useFetchListMovies';\nimport defImg from './MovieDefault.png';\n\nconst MoviesPage = () => {\n  const { searchQuery, searchHandler } = useFetchListMovies();\n\n  return (\n    <>\n      <FormSearchMovies searchHandler={searchHandler} />\n      <Wraper>\n        {searchQuery && (\n          <div>\n            <UL>\n              {searchQuery.map(item => (\n                <Links to={`/movies/${item.id}`}>\n                  <List key={item.id}>\n                    <IMG\n                      src={\n                        item.backdrop_path\n                          ? `https://image.tmdb.org/t/p/w200/${item.backdrop_path}`\n                          : defImg\n                      }\n                      alt={item.original_title}\n                    />\n                    <Title>{item.original_title}</Title>\n                  </List>\n                </Links>\n              ))}\n            </UL>\n          </div>\n        )}\n      </Wraper>\n    </>\n  );\n};\nexport default MoviesPage;\n","import { fetchMoviesForKeyWorld } from 'components/services/api';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\n\nexport const useFetchListMovies = () => {\n  const [searchQuery, setSearchQuery] = useState('');\n  // eslint-disable-next-line no-unused-vars\n  const [valueSearch, setValueSearch] = useState('');\n  const [searchParams, setSearchParams] = useSearchParams();\n  const moveQuery = searchParams.get('query') || '';\n\n  useEffect(() => {\n    if (moveQuery === '') {\n      return;\n    }\n    fetchMoviesForKeyWorld(moveQuery)\n      .then(data => {\n        setSearchQuery(data);\n        console.log(data);\n      })\n      .catch(error => {\n        console.log(error);\n      });\n  }, [moveQuery]);\n\n  const searchHandler = query => {\n    setValueSearch(query);\n    setSearchParams({ query: query });\n  };\n\n  return { searchQuery, searchHandler };\n};\n","import styled from '@emotion/styled';\nimport { Link } from 'react-router-dom';\n\nexport const Wraper = styled.div`\n  max-width: 1100px;\n  margin: 0 auto;\n  padding-top: 20px;\n`;\nexport const List = styled.li`\n  width: 900px;\n  height: 140px;\n  background-color: #e5e4e4;\n  margin-bottom: 10px;\n  display: flex;\n  border: 2px solid white;\n  transition: transform 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  :hover {\n    transform: scale(1.03);\n  }\n`;\nexport const IMG = styled.img`\n  width: 280px;\n`;\nexport const UL = styled.ul`\n  margin: 0 auto;\n  width: 900px;\n`;\n\nexport const Title = styled.h2`\n  font-size: 25px;\n  color: black;\n  text-align: center;\n  padding-left: 10px;\n  padding-top: 10px;\n  text-decoration: none;\n`;\n\nexport const Links = styled(Link)`\n  text-decoration: none;\n`;\n"],"names":["axios","KEY","fetchPopListMovies","data","results","fetchOneMovieId","movieId","fetchCast","cast","fetchReviews","fetchMoviesForKeyWorld","valueSearch","Container","styled","EntryField","Field","Button","initialValues","query","FormSearchMovies","searchHandler","onSubmit","resetForm","autoComplete","type","name","placeholder","useState","searchQuery","setSearchQuery","setValueSearch","useSearchParams","searchParams","setSearchParams","moveQuery","get","useEffect","then","console","log","catch","error","useFetchListMovies","Wraper","UL","map","item","Links","to","id","List","IMG","src","backdrop_path","defImg","alt","original_title","Title","Link"],"sourceRoot":""}